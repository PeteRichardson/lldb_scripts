#!/Library/Developer/CommandLineTools/usr/bin/python3
# NOTE:  must use the python3 in the CommandLineTools directory, not the Homebrew python3
#        because the Homebrew python3 does not have the lldb module

# make lldb module available
import sys
sys.path.append('/Library/Developer/CommandLineTools/Library/PrivateFrameworks/LLDB.framework/Versions/A/Resources/Python')
import lldb
import os

import argparse
import typing

def validate_binary(path):
    if os.path.exists(path) == False:
        raise argparse.ArgumentTypeError(f"'{path}' does not exist.")
    if not os.path.isfile(path):
        raise argparse.ArgumentTypeError(f"'{path}' is not a file.")
    return path

def get_parser():
    parser = argparse.ArgumentParser(description='List sections in a binary file (executable, shared library, object file, etc.) using lldb')
    parser.add_argument('binary', help='path to the binary to examine.',  type=validate_binary)
    #parser.add_argument('-c', '--csv', action='store_true', help='output in csv format')
    parser.add_argument('-d', '--dependencies', action='store_true', help='also examine dependent binaries')
    parser.add_argument('-k', '--skip-subsections', action='store_true', help='do not list subsections')
    return parser

def dump_section(sec: lldb.SBSection, module_name:str, indent: str):
    binary = module_name + "."
    parent = f"{sec.GetParent().name}." if sec.GetParent() else ""
    startaddr = sec.GetFileAddress()
    endaddr = startaddr + sec.size
    print(f"{indent}[0x{startaddr:016x}-0x{endaddr:016x}) {binary}{parent}{sec.name}")

if __name__ == '__main__':
    args = get_parser().parse_args()

    # Create a new debugger instance and a target
    debugger = lldb.SBDebugger.Create()
    target = debugger.CreateTarget (args.binary, None, None, args.dependencies, lldb.SBError())

    if target:
        for module in target.module_iter():
            module_name = os.path.basename(str(module.GetFileSpec()))
            for sec in module.section_iter():
                dump_section(sec, module_name, "")
                if not args.skip_subsections:
                    for subsec in sec:
                        dump_section(subsec, module_name, "    ")
    else:
        print("# Failed to create target.  Check the filetype.", file=sys.stderr)       
